{
  "address": "0x0660E2aE0C4E5f78d5859bd0F522CD22da5e9132",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blocks",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rlpBytes",
          "type": "bytes"
        }
      ],
      "name": "mintFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preMintFlag",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b6196a7bcede5be0587058574fd34a95395c79d8b1b6ee2d7218dc0b81996c4",
  "receipt": {
    "to": null,
    "from": "0x55b9CB0bCf56057010b9c471e7D42d60e1111EEa",
    "contractAddress": "0x0660E2aE0C4E5f78d5859bd0F522CD22da5e9132",
    "transactionIndex": 8,
    "gasUsed": "614195",
    "logsBloom": "0x
    "blockHash": "0x2daa60fe7b7f08d360a61d19c60ad28134ea205f19b0c4a2736fe861bfe747cc",
    "transactionHash": "0x8b6196a7bcede5be0587058574fd34a95395c79d8b1b6ee2d7218dc0b81996c4",
    "logs": [],
    "blockNumber": 127916675,
    "cumulativeGasUsed": "1976342",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x201750186f1b7e434373475713d9bcba0dF75eD5"
  ],
  "numDeployments": 1,
  "solcInputHash": "09e38c27414f652e58313b3598369c65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rlpBytes\",\"type\":\"bytes\"}],\"name\":\"mintFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preMintFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Challenge12.sol\":\"Challenge12\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Challenge12.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./RLPReader.sol\\\";\\nimport \\\"./INFTFlags.sol\\\";\\n\\ncontract Challenge12 {\\n    using RLPReader for RLPReader.RLPItem;\\n    using RLPReader for bytes;\\n\\n    address public nftContract;\\n    mapping(address => uint256) public blockNumber;\\n    mapping(uint256 => bool) public blocks;\\n\\n    uint256 public constant futureBlocks = 2;\\n\\n    constructor(address _nftContract) {\\n        nftContract = _nftContract;\\n    }\\n\\n    function preMintFlag() public {\\n        require(blocks[block.number] == false, \\\"Block already used\\\");\\n        blocks[block.number] = true;\\n        blockNumber[msg.sender] = block.number;\\n    }\\n\\n    function mintFlag(bytes memory rlpBytes) public {\\n        require(blockNumber[msg.sender] != 0, \\\"PreMintFlag first\\\");\\n        require(block.number >= blockNumber[msg.sender] + futureBlocks, \\\"Future block not reached.\\\");\\n        require(block.number < blockNumber[msg.sender] + futureBlocks + 256, \\\"You miss the window. PreMintFlag again.\\\");\\n\\n        RLPReader.RLPItem[] memory ls = rlpBytes.toRlpItem().toList();\\n\\n        uint256 blockNumberFromHeader = ls[8].toUint();\\n\\n        require(blockNumberFromHeader == blockNumber[msg.sender] + futureBlocks, \\\"Wrong block\\\");\\n\\n        require(blockhash(blockNumberFromHeader) == keccak256(rlpBytes), \\\"Wrong block header\\\");\\n\\n        INFTFlags(nftContract).mint(msg.sender, 12);\\n    }\\n}\\n\",\"keccak256\":\"0x68f1fca071655ac0215632def9a7743ba0634e1c5070019a9b2c5c586dcfddab\",\"license\":\"MIT\"},\"contracts/INFTFlags.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface INFTFlags {\\n    function mint(address _recipient, uint256 _challengeId) external;\\n}\\n\",\"keccak256\":\"0xe623eea1d08afa3f13cc5b80cc3445a673e8f7ac221ce2acc62a670402e7bf8b\",\"license\":\"MIT\"},\"contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity ^0.8.17;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint len;\\n        uint memPtr;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint, uint) {\\n        uint offset = _payloadOffset(item.memPtr);\\n        uint memPtr = item.memPtr + offset;\\n        uint len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint) {\\n        (, uint len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint dataLen;\\n        for (uint i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint memPtr, uint len) = payloadLocation(item);\\n\\n        uint result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint memPtr, uint len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint) {\\n        if (item.len == 0) return 0;\\n\\n        uint count = 0;\\n        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint memPtr) private pure returns (uint) {\\n        uint itemLen;\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint memPtr) private pure returns (uint) {\\n        uint byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint src, uint dest, uint len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint mask = 256 ** (WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6a5f617bfc29d9f1df4574176b87897fb4e5712e5daea660aaee759fea139e21\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a48380380610a4883398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6109b5806100936000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806310f081ec146100675780634f359a371461007c5780638c63f32a146100975780639e5a1ac0146100b7578063d56d229d146100bf578063f25b3f99146100ea575b600080fd5b61007a610075366004610802565b61011d565b005b610084600281565b6040519081526020015b60405180910390f35b6100846100a53660046108b3565b60016020526000908152604090205481565b61007a6103d6565b6000546100d2906001600160a01b031681565b6040516001600160a01b03909116815260200161008e565b61010d6100f83660046108dc565b60026020526000908152604090205460ff1681565b604051901515815260200161008e565b3360009081526001602052604081205490036101745760405162461bcd60e51b8152602060048201526011602482015270141c99535a5b9d119b1859c8199a5c9cdd607a1b60448201526064015b60405180910390fd5b336000908152600160205260409020546101909060029061090b565b4310156101df5760405162461bcd60e51b815260206004820152601960248201527f46757475726520626c6f636b206e6f7420726561636865642e00000000000000604482015260640161016b565b336000908152600160205260409020546101fb9060029061090b565b6102079061010061090b565b43106102655760405162461bcd60e51b815260206004820152602760248201527f596f75206d697373207468652077696e646f772e205072654d696e74466c61676044820152661030b3b0b4b71760c91b606482015260840161016b565b60006102a061029b8360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b610456565b905060006102c7826008815181106102ba576102ba610924565b602002602001015161056c565b336000908152600160205260409020549091506102e69060029061090b565b81146103225760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720626c6f636b60a81b604482015260640161016b565b8251602084012081401461036d5760405162461bcd60e51b81526020600482015260126024820152712bb937b73390313637b1b5903432b0b232b960711b604482015260640161016b565b6000546040516340c10f1960e01b8152336004820152600c60248201526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156103b957600080fd5b505af11580156103cd573d6000803e3d6000fd5b50505050505050565b4360009081526002602052604090205460ff161561042b5760405162461bcd60e51b8152602060048201526012602482015271109b1bd8dac8185b1c9958591e481d5cd95960721b604482015260640161016b565b436000818152600260209081526040808320805460ff19166001908117909155338452909152902055565b6060610461826105ba565b61046a57600080fd5b6000610475836105f5565b905060008167ffffffffffffffff811115610492576104926107ec565b6040519080825280602002602001820160405280156104d757816020015b60408051808201909152600080825260208201528152602001906001900390816104b05790505b50905060006104e9856020015161067a565b85602001516104f8919061090b565b90506000805b848110156105615761050f836106fc565b915060405180604001604052808381526020018481525084828151811061053857610538610924565b602090810291909101015261054d828461090b565b9250806105598161093a565b9150506104fe565b509195945050505050565b80516000901580159061058157508151602110155b61058a57600080fd5b600080610596846107a5565b8151919350915060208210156105b25760208290036101000a90045b949350505050565b805160009081036105cd57506000919050565b6020820151805160001a9060c08210156105eb575060009392505050565b5060019392505050565b8051600090810361060857506000919050565b600080610618846020015161067a565b8460200151610627919061090b565b905060008460000151856020015161063f919061090b565b90505b8082101561067157610653826106fc565b61065d908361090b565b9150826106698161093a565b935050610642565b50909392505050565b8051600090811a60808110156106935750600092915050565b60b88110806106ae575060c081108015906106ae575060f881105b156106bc5750600192915050565b60c08110156106f0576106d1600160b8610953565b6106de9060ff168261096c565b6106e990600161090b565b9392505050565b6106d1600160f8610953565b80516000908190811a6080811015610717576001915061079e565b60b881101561073d5761072b60808261096c565b61073690600161090b565b915061079e565b60c081101561076a5760b78103600185019450806020036101000a8551046001820181019350505061079e565b60f881101561077e5761072b60c08261096c565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b60008060006107b7846020015161067a565b905060008185602001516107cb919061090b565b905060008286600001516107df919061096c565b9196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561081457600080fd5b813567ffffffffffffffff8082111561082c57600080fd5b818401915084601f83011261084057600080fd5b813581811115610852576108526107ec565b604051601f8201601f19908116603f0116810190838211818310171561087a5761087a6107ec565b8160405282815287602084870101111561089357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156108c557600080fd5b81356001600160a01b03811681146106e957600080fd5b6000602082840312156108ee57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561091e5761091e6108f5565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820161094c5761094c6108f5565b5060010190565b60ff828116828216039081111561091e5761091e6108f5565b8181038181111561091e5761091e6108f556fea26469706673582212200fa9e8696359b31e20d4705771ce582b7fb94fa15e7a462b0832a801e002920664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806310f081ec146100675780634f359a371461007c5780638c63f32a146100975780639e5a1ac0146100b7578063d56d229d146100bf578063f25b3f99146100ea575b600080fd5b61007a610075366004610802565b61011d565b005b610084600281565b6040519081526020015b60405180910390f35b6100846100a53660046108b3565b60016020526000908152604090205481565b61007a6103d6565b6000546100d2906001600160a01b031681565b6040516001600160a01b03909116815260200161008e565b61010d6100f83660046108dc565b60026020526000908152604090205460ff1681565b604051901515815260200161008e565b3360009081526001602052604081205490036101745760405162461bcd60e51b8152602060048201526011602482015270141c99535a5b9d119b1859c8199a5c9cdd607a1b60448201526064015b60405180910390fd5b336000908152600160205260409020546101909060029061090b565b4310156101df5760405162461bcd60e51b815260206004820152601960248201527f46757475726520626c6f636b206e6f7420726561636865642e00000000000000604482015260640161016b565b336000908152600160205260409020546101fb9060029061090b565b6102079061010061090b565b43106102655760405162461bcd60e51b815260206004820152602760248201527f596f75206d697373207468652077696e646f772e205072654d696e74466c61676044820152661030b3b0b4b71760c91b606482015260840161016b565b60006102a061029b8360408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b610456565b905060006102c7826008815181106102ba576102ba610924565b602002602001015161056c565b336000908152600160205260409020549091506102e69060029061090b565b81146103225760405162461bcd60e51b815260206004820152600b60248201526a57726f6e6720626c6f636b60a81b604482015260640161016b565b8251602084012081401461036d5760405162461bcd60e51b81526020600482015260126024820152712bb937b73390313637b1b5903432b0b232b960711b604482015260640161016b565b6000546040516340c10f1960e01b8152336004820152600c60248201526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156103b957600080fd5b505af11580156103cd573d6000803e3d6000fd5b50505050505050565b4360009081526002602052604090205460ff161561042b5760405162461bcd60e51b8152602060048201526012602482015271109b1bd8dac8185b1c9958591e481d5cd95960721b604482015260640161016b565b436000818152600260209081526040808320805460ff19166001908117909155338452909152902055565b6060610461826105ba565b61046a57600080fd5b6000610475836105f5565b905060008167ffffffffffffffff811115610492576104926107ec565b6040519080825280602002602001820160405280156104d757816020015b60408051808201909152600080825260208201528152602001906001900390816104b05790505b50905060006104e9856020015161067a565b85602001516104f8919061090b565b90506000805b848110156105615761050f836106fc565b915060405180604001604052808381526020018481525084828151811061053857610538610924565b602090810291909101015261054d828461090b565b9250806105598161093a565b9150506104fe565b509195945050505050565b80516000901580159061058157508151602110155b61058a57600080fd5b600080610596846107a5565b8151919350915060208210156105b25760208290036101000a90045b949350505050565b805160009081036105cd57506000919050565b6020820151805160001a9060c08210156105eb575060009392505050565b5060019392505050565b8051600090810361060857506000919050565b600080610618846020015161067a565b8460200151610627919061090b565b905060008460000151856020015161063f919061090b565b90505b8082101561067157610653826106fc565b61065d908361090b565b9150826106698161093a565b935050610642565b50909392505050565b8051600090811a60808110156106935750600092915050565b60b88110806106ae575060c081108015906106ae575060f881105b156106bc5750600192915050565b60c08110156106f0576106d1600160b8610953565b6106de9060ff168261096c565b6106e990600161090b565b9392505050565b6106d1600160f8610953565b80516000908190811a6080811015610717576001915061079e565b60b881101561073d5761072b60808261096c565b61073690600161090b565b915061079e565b60c081101561076a5760b78103600185019450806020036101000a8551046001820181019350505061079e565b60f881101561077e5761072b60c08261096c565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b60008060006107b7846020015161067a565b905060008185602001516107cb919061090b565b905060008286600001516107df919061096c565b9196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561081457600080fd5b813567ffffffffffffffff8082111561082c57600080fd5b818401915084601f83011261084057600080fd5b813581811115610852576108526107ec565b604051601f8201601f19908116603f0116810190838211818310171561087a5761087a6107ec565b8160405282815287602084870101111561089357600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156108c557600080fd5b81356001600160a01b03811681146106e957600080fd5b6000602082840312156108ee57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561091e5761091e6108f5565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006001820161094c5761094c6108f5565b5060010190565b60ff828116828216039081111561091e5761091e6108f5565b8181038181111561091e5761091e6108f556fea26469706673582212200fa9e8696359b31e20d4705771ce582b7fb94fa15e7a462b0832a801e002920664736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3585,
        "contract": "contracts/Challenge12.sol:Challenge12",
        "label": "nftContract",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3589,
        "contract": "contracts/Challenge12.sol:Challenge12",
        "label": "blockNumber",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3593,
        "contract": "contracts/Challenge12.sol:Challenge12",
        "label": "blocks",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}