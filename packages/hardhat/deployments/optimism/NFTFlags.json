{
  "address": "0x201750186f1b7e434373475713d9bcba0dF75eD5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Disabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Enabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "FlagMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "addAllowedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "minters",
          "type": "address[]"
        }
      ],
      "name": "addAllowedMinterMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedMinters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enabledAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "flagColors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_challengeId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "removeAllowedMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToChallengeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8951325bff070ef23d915dbc9482f6f7b55d28f4dc775592fe30903df1eb88cd",
  "receipt": {
    "to": null,
    "from": "0x55b9CB0bCf56057010b9c471e7D42d60e1111EEa",
    "contractAddress": "0x201750186f1b7e434373475713d9bcba0dF75eD5",
    "transactionIndex": 15,
    "gasUsed": "4150035",
    "logsBloom": "0x
    "blockHash": "0xc0822f697ae9288fc7f3cb60f249cd858bf2497759f9922c6c6dfcf5f979f2a6",
    "transactionHash": "0x8951325bff070ef23d915dbc9482f6f7b55d28f4dc775592fe30903df1eb88cd",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 127916624,
        "transactionHash": "0x8951325bff070ef23d915dbc9482f6f7b55d28f4dc775592fe30903df1eb88cd",
        "address": "0x201750186f1b7e434373475713d9bcba0dF75eD5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000055b9cb0bcf56057010b9c471e7d42d60e1111eea"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0xc0822f697ae9288fc7f3cb60f249cd858bf2497759f9922c6c6dfcf5f979f2a6"
      }
    ],
    "blockNumber": 127916624,
    "cumulativeGasUsed": "6142099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x55b9CB0bCf56057010b9c471e7D42d60e1111EEa"
  ],
  "numDeployments": 1,
  "solcInputHash": "09e38c27414f652e58313b3598369c65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Disabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"FlagMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addAllowedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"}],\"name\":\"addAllowedMinterMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedMinters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabledAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"flagColors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_challengeId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeAllowedMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToChallengeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTFlags.sol\":\"NFTFlags\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.2) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 0x20)\\n            let dataPtr := data\\n            let endPtr := add(data, mload(data))\\n\\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\\n            // set it to zero to make sure no dirty bytes are read in that section.\\n            let afterPtr := add(endPtr, 0x20)\\n            let afterCache := mload(afterPtr)\\n            mstore(afterPtr, 0x00)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 byte (24 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\\n                // Use this as an index into the lookup table, mload an entire word\\n                // so the desired character is in the least significant byte, and\\n                // mstore8 this least significant byte into the result and continue.\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // Reset the value that was cached\\n            mstore(afterPtr, afterCache)\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x09000342b85b1a06fa1f5b71bdeef7c449cd25799aac14fa9053d8abd18219aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/NFTFlags.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\ncontract NFTFlags is ERC721, IERC721Receiver, Ownable {\\n    using Strings for uint256;\\n\\n    event Enabled(address indexed caller);\\n    event Disabled(address indexed caller);\\n\\n    mapping(address => bool) public allowedMinters;\\n    uint256 public tokenIdCounter;\\n    mapping(uint256 => uint256) public tokenIdToChallengeId;\\n    mapping(address => mapping(uint256 => bool)) public hasMinted;\\n    bool public enabled = false;\\n    uint256 public enabledAt;\\n\\n    string[15] public flagColors = [\\n        \\\"#4b5563\\\", // Default Gray\\n        \\\"#dc2626\\\", // Red\\n        \\\"#ea580c\\\", // Orange\\n        \\\"#d97706\\\", // Amber\\n        \\\"#ca8a04\\\", // Yellow\\n        \\\"#65a30d\\\", // Lime\\n        \\\"#16a34a\\\", // Green\\n        \\\"#059669\\\", // Emerald\\n        \\\"#0d9488\\\", // Teal\\n        \\\"#0891b2\\\", // Cyan\\n        \\\"#0284c7\\\", // Sky\\n        \\\"#2563eb\\\", // Blue\\n        \\\"#4f46e5\\\", // Indigo\\n        \\\"#7c3aed\\\", // Violet\\n        \\\"#9333ea\\\" // Purple\\n    ];\\n\\n    event FlagMinted(address indexed minter, uint256 indexed tokenId, uint256 indexed challengeId);\\n\\n    constructor(address _initialOwner) Ownable(_initialOwner) ERC721(\\\"BG-CTF\\\", \\\"CTF\\\") {}\\n\\n    function mint(address _recipient, uint256 _challengeId) external {\\n        require(allowedMinters[msg.sender], \\\"Not allowed to mint\\\");\\n        _mintToken(_recipient, _challengeId);\\n    }\\n\\n    function _mintToken(address _recipient, uint256 _challengeId) internal {\\n        require(enabled, \\\"Minting is not enabled\\\");\\n        require(_challengeId == 1 || hasMinted[_recipient][1], \\\"Team address is not registered\\\");\\n        require(!hasMinted[_recipient][_challengeId], \\\"Team address has already minted for this challenge\\\");\\n\\n        tokenIdCounter++;\\n        uint256 newTokenId = tokenIdCounter;\\n        _safeMint(_recipient, newTokenId);\\n        tokenIdToChallengeId[newTokenId] = _challengeId;\\n        hasMinted[_recipient][_challengeId] = true;\\n        emit FlagMinted(_recipient, newTokenId, _challengeId);\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(ownerOf(tokenId) != address(0), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory svg = generateSVG(tokenId);\\n        uint256 challengeId = tokenIdToChallengeId[tokenId];\\n        string memory json = Base64.encode(\\n            bytes(\\n                string(\\n                    abi.encodePacked(\\n                        '{\\\"name\\\": \\\"Challenge #',\\n                        challengeId.toString(),\\n                        \\\" flag (tokenId = \\\",\\n                        tokenId.toString(),\\n                        \\\")\\\",\\n                        '\\\", \\\"description\\\": \\\"A NFT flag for the BuidlGuidl CTF at Devcon SEA 2024\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                        Base64.encode(bytes(svg)),\\n                        '\\\"}'\\n                    )\\n                )\\n            )\\n        );\\n\\n        return string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n    }\\n\\n    function generateSVG(uint256 tokenId) internal view returns (string memory) {\\n        uint256 challengeId = tokenIdToChallengeId[tokenId];\\n        string memory fillColor = flagColors[challengeId];\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 461 573\\\"><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"m292.296 11.388-34.774-9.317-2.07 7.727-7.728-2.07-6.988 26.08 7.728 2.07-67.811 253.073 7.727 2.07 29.765-111.081 19.318 5.176-29.764 111.081 7.727 2.071 31.835-118.809 8.693 2.33-2.07 7.727 25.114 6.729 2.071-7.727 24.148 6.47 2.07-7.727 17.387 4.659 2.07-7.728 32.842 8.8-2.071 7.727 17.387 4.659-2.071 7.728 31.876 8.541 6.729-25.114-7.727-2.071 8.8-32.841-7.728-2.071 6.988-26.08 7.728 2.071 4.917-18.353 10.626 2.847 2.07-7.727 7.728 2.07 4.4-16.42-16.421-4.4 2.07-7.728-17.386-4.659 2.07-7.727-49.262-13.2-2.071 7.728-26.08-6.989-2.07 7.728-16.421-4.4-2.07 7.727-17.387-4.659 2.071-7.727-25.115-6.73 2.071-7.727 7.727 2.071 6.989-26.08-7.728-2.07 2.071-7.728Zm-2.071 7.727-6.988 26.08-34.773-9.317 6.988-26.08 34.773 9.317ZM304.21 67.38l-25.114-6.729-29.764 111.082 8.693 2.329-2.071 7.728 25.115 6.729 2.07-7.728 24.148 6.471 2.071-7.728 17.386 4.659 2.071-7.727 32.841 8.8-2.07 7.727 17.387 4.659-2.071 7.727 24.148 6.471 4.659-17.387-7.727-2.071 8.799-32.841-7.727-2.071 6.988-26.08 7.727 2.071 4.918-18.353 7.727 2.071 2.071-7.727 10.625 2.847 2.33-8.694-8.694-2.329 2.071-7.728L415.43 88.9l2.071-7.728-49.263-13.2-2.07 7.728-26.08-6.988-2.071 7.727-16.42-4.4-2.071 7.728-17.387-4.659 2.071-7.728Zm-64.676 110.01 33.905-126.537-19.318-5.176-33.906 126.536 19.319 5.177Z\\\" fill=\\\"#61405E\\\"/><path d=\\\"m290.225 19.115-6.988 26.08-34.773-9.317 6.988-26.08 34.773 9.317Z\\\" fill=\\\"#AC8E4C\\\"/><path d=\\\"m254.121 45.676 19.318 5.176-33.905 126.537-19.319-5.177 33.906-126.536Z\\\" fill=\\\"',\\n                    fillColor,\\n                    '\\\"/><path d=\\\"m218.145 179.94 19.318 5.176-29.764 111.081-19.319-5.176 29.765-111.081Z\\\" fill=\\\"#AA8B48\\\"/><path d=\\\"m417.501 81.171-49.263-13.2-2.07 7.728-26.08-6.988-2.071 7.727-16.42-4.4-2.071 7.728-17.387-4.659 2.071-7.728-25.114-6.729-29.764 111.082 8.693 2.329-2.071 7.728 25.115 6.729 2.07-7.728 24.148 6.471 2.071-7.728 17.386 4.659 2.071-7.727 32.841 8.8-2.07 7.727 17.387 4.659-2.071 7.727 24.148 6.471 4.659-17.387-7.727-2.071 8.799-32.841-7.727-2.071 6.988-26.08 7.727 2.071 4.918-18.353 7.727 2.071 2.071-7.727 10.625 2.847 2.33-8.694-8.694-2.329 2.071-7.728L415.43 88.9l2.071-7.728Z\\\" fill=\\\"',\\n                    fillColor,\\n                    '\\\"/><text transform=\\\"rotate(15 -157.214 1272.167)\\\" fill=\\\"#fff\\\" xml:space=\\\"preserve\\\" style=\\\"white-space:pre\\\" font-family=\\\"Courier New\\\" font-size=\\\"80\\\" font-weight=\\\"bold\\\" text-anchor=\\\"middle\\\">',\\n                    '<tspan x=\\\"20\\\" y=\\\"62.578\\\">',\\n                    challengeId.toString(),\\n                    \\\"</tspan>\\\",\\n                    '</text><path d=\\\"M147.926 177h8v16h8v16h8v8h8v17h8v16h8v16h8v15h8v9h8v16h8v16h8v8h8v17h8v16h8v8h-8v8h-8v8h-16v8h-8v8h-16v8h-8v8h-16v8h-8v8h-16v8h-24v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-8v-8h8v-16h8v-17h8v-8h8v-16h8v-16h8v-9h8v-15h8v-16h8v-16h8v-17h8v-8h8v-16h8v-16h8v-16h8v16Z\\\" fill=\\\"#F2A0EB\\\"/><path d=\\\"M27.926 395v8h8v8h8v16h8v8h8v8h8v16h8v9h8v16h8v8h8v16h8v8h8v16h8v8h8v16h8v13h8v-13h8v-16h8v-8h8v-16h8v-8h8v-16h8v-8h8v-16h8v-9h8v-16h8v-8h8v-8h8v-16h8v-8h8v-8h-8v8h-16v8h-8v8h-16v8h-8v8h-16v8h-8v8h-16v8h-8v9h-24v-9h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8Z\\\" fill=\\\"#F2A0EB\\\"/><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M147.926 266h8v16h8v16h8v8h16v-8h8v49h32v8h-8v16h-8v-16h-24v8h-16v8h-8v8h-8v-41h-8v-16h16v-16h-8v-16h-8v-16h-8v16h-8v16h-8v16h16v16h-8v41h-8v-8h-8v-8h-16v-8h-24v16h-8v-16h-8v-8h32v-49h8v8h16v-8h8v-16h8v-16h8v-8h8v8Zm-40 81h-8v-33h8v8h8v8h8v25h-16v-8Zm72-33h8v33h-8v8h-16v-25h8v-8h8v-8Z\\\" fill=\\\"#61405E\\\"/><path d=\\\"M99.926 395v-8h-8v-8h-8v-8h-8v16h8v8h16ZM115.926 403h24v-8h-8v-16h8v8h8v-8h8v16h-8v8h24v8h-56v-8ZM187.926 395v8h-16v-8h16ZM187.926 395h16v-8h8v-16h-8v8h-8v8h-8v8Z\\\" fill=\\\"#61405E\\\"/><path d=\\\"M115.926 403v-8h-16v8h16ZM139.926 322h8v-8h-8v8Z\\\" fill=\\\"#61405E\\\"/><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M127.926 447v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-8v-16h8v-16h8v-17h8v-8h8v-16h8v-16h8v-9h8v-15h8v-16h8v-16h8v-17h8v-8h8v-16h8v-16h8v-16h16v16h8v16h8v16h8v8h8v17h8v16h8v16h8v15h8v9h8v16h8v16h8v8h8v17h8v16h8v16h-8v8h-8v8h-16v8h-8v8h-16v8h-8v8h-16v8h-8v8h8v-8h16v-8h8v-8h16v-8h8v-8h16v-8h16v16h-8v8h-8v16h-8v8h-8v8h-8v16h-8v9h-8v16h-8v8h-8v16h-8v8h-8v16h-8v8h-8v16h-8v13h-16v-13h-8v-16h-8v-8h-8v-16h-8v-8h-8v-16h-8v-8h-8v-16h-8v-9h-8v-16h-8v-8h-8v-8h-8v-16h-8v-8h-8v-16h16v8h16v8h8v8h16v8h8v8h16v8h8v8h16Zm20-286v16h8v16h8v16h8v8h8v17h8v16h8v16h8v15h8v9h8v16h8v16h8v8h8v17h8v16h8v8h-8v8h-8v8h-16v8h-8v8h-16v8h-8v8h-16v8h-8v8h-16v8h-24v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-16v-8h-8v-8h-8v-8h8v-16h8v-17h8v-8h8v-16h8v-16h8v-9h8v-15h8v-16h8v-16h8v-17h8v-8h8v-16h8v-16h8v-16h8Zm12 286v-8h16v8h-16Zm-32 0h32v8h-8v9h-16v-9h-8v-8Zm12 122v-13h-8v-16h-8v-8h-8v-16h-8v-8h-8v-16h-8v-8h-8v-16h-8v-9h-8v-16h-8v-8h-8v-8h-8v-16h-8v-8h16v8h8v8h16v8h8v8h16v8h8v8h16v8h8v9h24v-9h8v-8h16v-8h8v-8h16v-8h8v-8h16v-8h8v-8h16v8h-8v16h-8v8h-8v8h-8v16h-8v9h-8v16h-8v8h-8v16h-8v8h-8v16h-8v8h-8v16h-8v13h-8Zm112-166v-8h8v8h-8Zm-216 0h-8v-8h8v8Z\\\" fill=\\\"#61405E\\\"/><path d=\\\"M13.701 355.416 0 347.648l6.658-11.744 1.957 1.11 1.11-1.958 3.915 2.22-1.11 1.957 1.957 1.11 1.11-1.958 3.915 2.22-1.11 1.957 1.957 1.11-6.658 11.744Zm-5.61-8.354 3.33-5.872-3.915-2.219-3.33 5.872 3.915 2.219Zm5.872 3.329 3.33-5.872-3.915-2.219-3.33 5.872 3.915 2.219ZM23.812 337.582l-1.958-1.11-1.11 1.958-7.829-4.439 2.22-3.915 7.829 4.439 3.329-5.872-7.83-4.439 2.22-3.914 9.787 5.548-6.658 11.744ZM22.055 313.308l-1.958-1.11 2.22-3.914 1.957 1.109-2.22 3.915Zm9.524 10.573-1.957-1.11 2.22-3.915-5.873-3.329-1.11 1.958-1.957-1.11 3.33-5.872 7.828 4.439 2.22-3.915 1.957 1.11-6.658 11.744ZM40.456 308.222l-1.957-1.11-1.11 1.958-5.872-3.329 1.11-1.958-1.957-1.109 4.438-7.83-3.914-2.219 2.22-3.915 13.7 7.768-6.657 11.744Zm-.847-3.067 3.329-5.872-5.872-3.329-3.33 5.872 5.873 3.329ZM48.532 293.977l-1.957-1.109 2.22-3.915-9.788-5.548-1.11 1.957-1.956-1.11 3.328-5.872 11.745 6.658 2.219-3.914 1.957 1.109-6.658 11.744ZM58.458 276.47l-1.958-1.11-1.11 1.957-1.957-1.109-1.11 1.957-5.871-3.329 1.11-1.957-1.958-1.11 1.11-1.957-1.958-1.11 5.549-9.786 1.957 1.109-4.439 7.83 1.958 1.109-1.11 1.958 5.872 3.328 1.11-1.957 1.957 1.11 2.22-3.915-3.915-2.219-1.11 1.957-1.957-1.109 3.329-5.872 7.829 4.438-5.548 9.787ZM66.472 262.334l-1.957-1.11-1.11 1.957-7.83-4.438 2.22-3.915 7.83 4.439 3.328-5.872-7.83-4.439 2.22-3.915 9.787 5.549-6.658 11.744ZM64.838 237.842l-1.957-1.11 2.22-3.914 1.957 1.109-2.22 3.915Zm9.525 10.573-1.957-1.11 2.219-3.915-5.872-3.329-1.11 1.958-1.957-1.11 3.329-5.872 7.83 4.439 2.219-3.915 1.957 1.11-6.658 11.744ZM83.24 232.756l-1.957-1.11-1.11 1.958-5.872-3.329 1.11-1.958-1.957-1.109 4.438-7.83-3.915-2.219 2.22-3.915 13.701 7.768-6.658 11.744Zm-.848-3.067 3.33-5.872-5.873-3.329-3.329 5.872 5.872 3.329ZM91.131 218.837l-1.957-1.109 2.219-3.915-9.787-5.548-1.11 1.957-1.957-1.11 3.33-5.872 11.743 6.658 2.22-3.914 1.957 1.109-6.658 11.744ZM104.694 194.914l-1.958-1.109-1.109 1.957-1.958-1.11-1.11 1.958-5.871-3.329 1.11-1.958-1.958-1.109 1.11-1.958-1.958-1.109 4.439-7.83 1.957 1.11 1.11-1.957 1.957 1.109-2.22 3.915-1.956-1.11-2.22 3.915 1.958 1.11-1.11 1.957 5.872 3.329 1.11-1.957 1.957 1.109 2.219-3.914-1.957-1.11 2.219-3.915 1.958 1.11-1.11 1.957 1.957 1.11-4.438 7.829ZM113.571 179.256l-11.744-6.658-2.22 3.914-1.957-1.109 6.658-11.744 1.958 1.109-2.22 3.915 11.744 6.658-2.219 3.915ZM119.119 169.469l-13.701-7.768L113.185 148l1.958 1.11-5.549 9.786 3.915 2.22 4.439-7.83 1.957 1.11-4.439 7.829 5.872 3.329-2.219 3.915Z\\\" fill=\\\"#61405E\\\"/></svg>'\\n                )\\n            );\\n    }\\n\\n    function addAllowedMinterMultiple(address[] calldata minters) external onlyOwner {\\n        for (uint256 i = 0; i < minters.length; i++) {\\n            allowedMinters[minters[i]] = true;\\n        }\\n    }\\n\\n    function addAllowedMinter(address minter) external onlyOwner {\\n        allowedMinters[minter] = true;\\n    }\\n\\n    function removeAllowedMinter(address minter) external onlyOwner {\\n        allowedMinters[minter] = false;\\n    }\\n\\n    function enable() external onlyOwner {\\n        enabled = true;\\n        enabledAt = block.timestamp;\\n\\n        emit Enabled(msg.sender);\\n    }\\n\\n    function disable() external onlyOwner {\\n        enabled = false;\\n\\n        emit Disabled(msg.sender);\\n    }\\n\\n    // https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol#L374\\n    function _toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n        require(_bytes.length >= 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(_bytes, 0x20))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        uint256 anotherTokenId = _toUint256(data);\\n\\n        require(msg.sender == address(this), \\\"only this contract can call this function!\\\");\\n\\n        require(ownerOf(anotherTokenId) == from, \\\"Not owner!\\\");\\n\\n        require(tokenIdToChallengeId[tokenId] == 1, \\\"Not the right token 1!\\\");\\n        require(tokenIdToChallengeId[anotherTokenId] == 9, \\\"Not the right token 9!\\\");\\n\\n        _mintToken(from, 10);\\n\\n        safeTransferFrom(address(this), from, tokenId);\\n\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x47884b60bd14bb41fb632b06893c12279852745153519af5da457f6a8e9cc48f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806380960a4d11610104578063b76ba2e4116100a2578063e320a05b11610071578063e320a05b146103ed578063e985e9c51461040d578063f2fde38b14610420578063f8f1147d1461043357600080fd5b8063b76ba2e4146103a1578063b88d4fde146103b4578063bad39b96146103c7578063c87b56dd146103da57600080fd5b806395d89b41116100de57806395d89b411461037557806398bdf6f51461037d578063a22cb46514610386578063a3907d711461039957600080fd5b806380960a4d146103485780638da5cb5b1461035b5780638f7e9c041461036c57600080fd5b80632f2770db1161017c578063488603df1161014b578063488603df146102f95780636352211e1461030c57806370a082311461031f578063715018a61461034057600080fd5b80632f2770db146102a857806340c10f19146102b0578063423afa66146102c357806342842e0e146102e657600080fd5b8063095ea7b3116101b8578063095ea7b314610247578063150b7a021461025c578063238dafe01461028857806323b872dd1461029557600080fd5b806301ffc9a7146101df57806306fdde0314610207578063081812fc1461021c575b600080fd5b6101f26101ed36600461184d565b610461565b60405190151581526020015b60405180910390f35b61020f6104b3565b6040516101fe91906118c1565b61022f61022a3660046118d4565b610545565b6040516001600160a01b0390911681526020016101fe565b61025a610255366004611909565b61056e565b005b61026f61026a366004611933565b61057d565b6040516001600160e01b031990911681526020016101fe565b600b546101f29060ff1681565b61025a6102a33660046119ce565b610756565b61025a6107e1565b61025a6102be366004611909565b610820565b6101f26102d1366004611a0a565b60076020526000908152604090205460ff1681565b61025a6102f43660046119ce565b61087f565b61025a610307366004611a0a565b61089f565b61022f61031a3660046118d4565b6108cb565b61033261032d366004611a0a565b6108d6565b6040519081526020016101fe565b61025a61091e565b61020f6103563660046118d4565b610932565b6006546001600160a01b031661022f565b610332600c5481565b61020f6109d2565b61033260085481565b61025a610394366004611a25565b6109e1565b61025a6109ec565b61025a6103af366004611a61565b610a32565b61025a6103c2366004611aec565b610aac565b61025a6103d5366004611a0a565b610ac3565b61020f6103e83660046118d4565b610aec565b6103326103fb3660046118d4565b60096020526000908152604090205481565b6101f261041b366004611bc8565b610bf4565b61025a61042e366004611a0a565b610c22565b6101f2610441366004611909565b600a60209081526000928352604080842090915290825290205460ff1681565b60006001600160e01b031982166380ac58cd60e01b148061049257506001600160e01b03198216635b5e139f60e01b145b806104ad57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546104c290611bfb565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee90611bfb565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b5050505050905090565b600061055082610c60565b506000828152600460205260409020546001600160a01b03166104ad565b610579828233610c99565b5050565b6000806105bf84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ca692505050565b90503330146106285760405162461bcd60e51b815260206004820152602a60248201527f6f6e6c79207468697320636f6e74726163742063616e2063616c6c20746869736044820152692066756e6374696f6e2160b01b60648201526084015b60405180910390fd5b856001600160a01b031661063b826108cb565b6001600160a01b03161461067e5760405162461bcd60e51b815260206004820152600a6024820152694e6f74206f776e65722160b01b604482015260640161061f565b6000858152600960205260409020546001146106d55760405162461bcd60e51b81526020600482015260166024820152754e6f742074686520726967687420746f6b656e20312160501b604482015260640161061f565b6000818152600960208190526040909120541461072d5760405162461bcd60e51b81526020600482015260166024820152754e6f742074686520726967687420746f6b656e20392160501b604482015260640161061f565b61073886600a610cfa565b61074330878761087f565b50630a85bd0160e11b9695505050505050565b6001600160a01b03821661078057604051633250574960e11b81526000600482015260240161061f565b600061078d838333610ee0565b9050836001600160a01b0316816001600160a01b0316146107db576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161061f565b50505050565b6107e9610fd9565b600b805460ff1916905560405133907ff54453d15e2e6aee566733e6da03165ea58500408e802e05aa4e75f2408f59fe90600090a2565b3360009081526007602052604090205460ff166108755760405162461bcd60e51b8152602060048201526013602482015272139bdd08185b1b1bddd959081d1bc81b5a5b9d606a1b604482015260640161061f565b6105798282610cfa565b61089a83838360405180602001604052806000815250610aac565b505050565b6108a7610fd9565b6001600160a01b03166000908152600760205260409020805460ff19166001179055565b60006104ad82610c60565b60006001600160a01b038216610902576040516322718ad960e21b81526000600482015260240161061f565b506001600160a01b031660009081526003602052604090205490565b610926610fd9565b6109306000611006565b565b600d81600f811061094257600080fd5b01805490915061095190611bfb565b80601f016020809104026020016040519081016040528092919081815260200182805461097d90611bfb565b80156109ca5780601f1061099f576101008083540402835291602001916109ca565b820191906000526020600020905b8154815290600101906020018083116109ad57829003601f168201915b505050505081565b6060600180546104c290611bfb565b610579338383611058565b6109f4610fd9565b600b805460ff1916600117905542600c5560405133907f44bcce471802f9158ee4390426e4a931d186757cc50d302f6747504c17516d1290600090a2565b610a3a610fd9565b60005b8181101561089a57600160076000858585818110610a5d57610a5d611c35565b9050602002016020810190610a729190611a0a565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610aa481611c61565b915050610a3d565b610ab7848484610756565b6107db848484846110f7565b610acb610fd9565b6001600160a01b03166000908152600760205260409020805460ff19169055565b60606000610af9836108cb565b6001600160a01b031603610b675760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161061f565b6000610b7283611220565b600084815260096020526040812054919250610bc8610b9083611306565b610b9987611306565b610ba286611399565b604051602001610bb493929190611c96565b604051602081830303815290604052611399565b905080604051602001610bdb9190611dbf565b6040516020818303038152906040529350505050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610c2a610fd9565b6001600160a01b038116610c5457604051631e4fbdf760e01b81526000600482015260240161061f565b610c5d81611006565b50565b6000818152600260205260408120546001600160a01b0316806104ad57604051637e27328960e01b81526004810184905260240161061f565b61089a83838360016114f9565b6000602082511015610cf25760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b604482015260640161061f565b506020015190565b600b5460ff16610d455760405162461bcd60e51b8152602060048201526016602482015275135a5b9d1a5b99c81a5cc81b9bdd08195b98589b195960521b604482015260640161061f565b8060011480610d7857506001600160a01b0382166000908152600a602090815260408083206001845290915290205460ff165b610dc45760405162461bcd60e51b815260206004820152601e60248201527f5465616d2061646472657373206973206e6f7420726567697374657265640000604482015260640161061f565b6001600160a01b0382166000908152600a6020908152604080832084845290915290205460ff1615610e535760405162461bcd60e51b815260206004820152603260248201527f5465616d20616464726573732068617320616c7265616479206d696e74656420604482015271666f722074686973206368616c6c656e676560701b606482015260840161061f565b60088054906000610e6383611c61565b9091555050600854610e7583826115ff565b60008181526009602090815260408083208590556001600160a01b038616808452600a8352818420868552909252808320805460ff191660011790555184928492917fef633ead5fa8a224bb818380531535925c31239123ac0a6f54c9135616f054759190a4505050565b6000828152600260205260408120546001600160a01b0390811690831615610f0d57610f0d818486611619565b6001600160a01b03811615610f4b57610f2a6000856000806114f9565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615610f7a576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6006546001600160a01b031633146109305760405163118cdaa760e01b815233600482015260240161061f565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03821661108a57604051630b61174360e31b81526001600160a01b038316600482015260240161061f565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b156107db57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290611139903390889087908790600401611e04565b6020604051808303816000875af1925050508015611174575060408051601f3d908101601f1916820190925261117191810190611e41565b60015b6111dd573d8080156111a2576040519150601f19603f3d011682016040523d82523d6000602084013e6111a7565b606091505b5080516000036111d557604051633250574960e11b81526001600160a01b038516600482015260240161061f565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461121957604051633250574960e11b81526001600160a01b038516600482015260240161061f565b5050505050565b600081815260096020526040812054606091600d82600f811061124557611245611c35565b01805461125190611bfb565b80601f016020809104026020016040519081016040528092919081815260200182805461127d90611bfb565b80156112ca5780601f1061129f576101008083540402835291602001916112ca565b820191906000526020600020905b8154815290600101906020018083116112ad57829003601f168201915b5050505050905080816112dc84611306565b6040516020016112ee93929190611e5e565b60405160208183030381529060405292505050919050565b606060006113138361167d565b600101905060008167ffffffffffffffff81111561133357611333611ad6565b6040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136757509392505050565b606081516000036113b857505060408051602081019091526000815290565b60006040518060600160405280604081526020016141cb60409139905060006003845160026113e7919061417e565b6113f19190614191565b6113fc9060046141b3565b67ffffffffffffffff81111561141457611414611ad6565b6040519080825280601f01601f19166020018201604052801561143e576020820181803683370190505b50905060018201602082018586518701602081018051600082525b828410156114b4576003840193508351603f8160121c168701518653600186019550603f81600c1c168701518653600186019550603f8160061c168701518653600186019550603f8116870151865350600185019450611459565b90525050855160039006600181146114d357600281146114e6576114ee565b603d6001830353603d60028303536114ee565b603d60018303535b509195945050505050565b808061150d57506001600160a01b03821615155b156115cf57600061151d84610c60565b90506001600160a01b038316158015906115495750826001600160a01b0316816001600160a01b031614155b801561155c575061155a8184610bf4565b155b156115855760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161061f565b81156115cd5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610579828260405180602001604052806000815250611755565b61162483838361176c565b61089a576001600160a01b03831661165257604051637e27328960e01b81526004810182905260240161061f565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161061f565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106116bc5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106116e8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061170657662386f26fc10000830492506010015b6305f5e100831061171e576305f5e100830492506008015b612710831061173257612710830492506004015b60648310611744576064830492506002015b600a83106104ad5760010192915050565b61175f83836117d2565b61089a60008484846110f7565b60006001600160a01b038316158015906117ca5750826001600160a01b0316846001600160a01b031614806117a657506117a68484610bf4565b806117ca57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160a01b0382166117fc57604051633250574960e11b81526000600482015260240161061f565b600061180a83836000610ee0565b90506001600160a01b0381161561089a576040516339e3563760e11b81526000600482015260240161061f565b6001600160e01b031981168114610c5d57600080fd5b60006020828403121561185f57600080fd5b813561186a81611837565b9392505050565b60005b8381101561188c578181015183820152602001611874565b50506000910152565b600081518084526118ad816020860160208601611871565b601f01601f19169290920160200192915050565b60208152600061186a6020830184611895565b6000602082840312156118e657600080fd5b5035919050565b80356001600160a01b038116811461190457600080fd5b919050565b6000806040838503121561191c57600080fd5b611925836118ed565b946020939093013593505050565b60008060008060006080868803121561194b57600080fd5b611954866118ed565b9450611962602087016118ed565b935060408601359250606086013567ffffffffffffffff8082111561198657600080fd5b818801915088601f83011261199a57600080fd5b8135818111156119a957600080fd5b8960208285010111156119bb57600080fd5b9699959850939650602001949392505050565b6000806000606084860312156119e357600080fd5b6119ec846118ed565b92506119fa602085016118ed565b9150604084013590509250925092565b600060208284031215611a1c57600080fd5b61186a826118ed565b60008060408385031215611a3857600080fd5b611a41836118ed565b915060208301358015158114611a5657600080fd5b809150509250929050565b60008060208385031215611a7457600080fd5b823567ffffffffffffffff80821115611a8c57600080fd5b818501915085601f830112611aa057600080fd5b813581811115611aaf57600080fd5b8660208260051b8501011115611ac457600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611b0257600080fd5b611b0b856118ed565b9350611b19602086016118ed565b925060408501359150606085013567ffffffffffffffff80821115611b3d57600080fd5b818701915087601f830112611b5157600080fd5b813581811115611b6357611b63611ad6565b604051601f8201601f19908116603f01168101908382118183101715611b8b57611b8b611ad6565b816040528281528a6020848701011115611ba457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611bdb57600080fd5b611be4836118ed565b9150611bf2602084016118ed565b90509250929050565b600181811c90821680611c0f57607f821691505b602082108103611c2f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c7357611c73611c4b565b5060010190565b60008151611c8c818560208601611871565b9290920192915050565b747b226e616d65223a20224368616c6c656e6765202360581b81528351600090611cc7816015850160208901611871565b70010333630b390143a37b5b2b724b2101e9607d1b6015918401918201528451611cf8816026840160208901611871565b602960f81b602692909101918201527f222c20226465736372697074696f6e223a202241204e465420666c616720666f60278201527f722074686520427569646c477569646c2043544620617420446576636f6e205360478201527f45412032303234222c2022696d616765223a2022646174613a696d6167652f7360678201526d1d99cade1b5b0ed8985cd94d8d0b60921b60878201528351611da3816095840160208801611871565b61227d60f01b6095929091019182015260970195945050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611df781601d850160208701611871565b91909101601d0192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e3790830184611895565b9695505050505050565b600060208284031215611e5357600080fd5b815161186a81611837565b7f3c7376672066696c6c3d226e6f6e652220786d6c6e733d22687474703a2f2f7781527f77772e77332e6f72672f323030302f737667222076696577426f783d2230203060208201527f2034363120353733223e3c706174682066696c6c2d72756c653d226576656e6f60408201527f64642220636c69702d72756c653d226576656e6f64642220643d226d3239322e60608201527f3239362031312e3338382d33342e3737342d392e3331372d322e303720372e3760808201527f32372d372e3732382d322e30372d362e3938382032362e303820372e3732382060a08201527f322e30372d36372e383131203235332e30373320372e37323720322e3037203260c08201527f392e3736352d3131312e3038312031392e33313820352e3137362d32392e373660e08201527f34203131312e30383120372e37323720322e3037312033312e3833352d3131386101008201527f2e38303920382e36393320322e33332d322e303720372e3732372032352e31316101208201527f3420362e37323920322e3037312d372e3732372032342e31343820362e3437206101408201527f322e30372d372e3732372031372e33383720342e36353920322e30372d372e376101608201527f32382033322e38343220382e382d322e30373120372e3732372031372e3338376101808201527f20342e3635392d322e30373120372e3732382033312e38373620382e353431206101a08201527f362e3732392d32352e3131342d372e3732372d322e30373120382e382d33322e6101c08201527f3834312d372e3732382d322e30373120362e3938382d32362e303820372e37326101e08201527f3820322e30373120342e3931372d31382e3335332031302e36323620322e38346102008201527f3720322e30372d372e37323720372e37323820322e303720342e342d31362e346102208201527f322d31362e3432312d342e3420322e30372d372e3732382d31372e3338362d346102408201527f2e36353920322e30372d372e3732372d34392e3236322d31332e322d322e30376102608201527f3120372e3732382d32362e30382d362e3938392d322e303720372e3732382d316102808201527f362e3432312d342e342d322e303720372e3732372d31372e3338372d342e36356102a08201527f3920322e3037312d372e3732372d32352e3131352d362e373320322e3037312d6102c08201527f372e37323720372e37323720322e30373120362e3938392d32362e30382d372e6102e08201527f3732382d322e303720322e3037312d372e3732385a6d2d322e30373120372e376103008201527f32372d362e3938382032362e30382d33342e3737332d392e33313720362e39386103208201527f382d32362e30382033342e37373320392e3331375a4d3330342e32312036372e6103408201527f33386c2d32352e3131342d362e3732392d32392e373634203131312e303832206103608201527f382e36393320322e3332392d322e30373120372e3732382032352e31313520366103808201527f2e37323920322e30372d372e3732382032342e31343820362e34373120322e306103a08201527f37312d372e3732382031372e33383620342e36353920322e3037312d372e37326103c08201527f372033322e38343120382e382d322e303720372e3732372031372e33383720346103e08201527f2e3635392d322e30373120372e3732372032342e31343820362e34373120342e6104008201527f3635392d31372e3338372d372e3732372d322e30373120382e3739392d33322e6104208201527f3834312d372e3732372d322e30373120362e3938382d32362e303820372e37326104408201527f3720322e30373120342e3931382d31382e33353320372e37323720322e3037316104608201527f20322e3037312d372e3732372031302e36323520322e38343720322e33332d386104808201527f2e3639342d382e3639342d322e33323920322e3037312d372e3732384c3431356104a08201527f2e34332038382e396c322e3037312d372e3732382d34392e3236332d31332e326104c08201527f2d322e303720372e3732382d32362e30382d362e3938382d322e30373120372e6104e08201527f3732372d31362e34322d342e342d322e30373120372e3732382d31372e3338376105008201527f2d342e36353920322e3037312d372e3732385a6d2d36342e363736203131302e6105208201527f30312033332e3930352d3132362e3533372d31392e3331382d352e3137362d336105408201527f332e393036203132362e3533362031392e33313920352e3137375a222066696c6105608201527f6c3d2223363134303545222f3e3c7061746820643d226d3239302e32323520316105808201527f392e3131352d362e3938382032362e30382d33342e3737332d392e33313720366105a08201527f2e3938382d32362e30382033342e37373320392e3331375a222066696c6c3d226105c08201527f23414338453443222f3e3c7061746820643d226d3235342e3132312034352e366105e08201527f37362031392e33313820352e3137362d33332e393035203132362e3533372d316106008201527f392e3331392d352e3137372033332e3930362d3132362e3533365a222066696c61062082015262361e9160e91b6106408201526000614175612a2d612a19612a136129ea6129036128fd6126236106438a018d611c7a565b7f222f3e3c7061746820643d226d3231382e313435203137392e39342031392e3381527f313820352e3137362d32392e373634203131312e3038312d31392e3331392d3560208201527f2e3137362032392e3736352d3131312e3038315a222066696c6c3d222341413860408201527f423438222f3e3c7061746820643d226d3431372e3530312038312e3137312d3460608201527f392e3236332d31332e322d322e303720372e3732382d32362e30382d362e393860808201527f382d322e30373120372e3732372d31362e34322d342e342d322e30373120372e60a08201527f3732382d31372e3338372d342e36353920322e3037312d372e3732382d32352e60c08201527f3131342d362e3732392d32392e373634203131312e30383220382e363933203260e08201527f2e3332392d322e30373120372e3732382032352e31313520362e37323920322e6101008201527f30372d372e3732382032342e31343820362e34373120322e3037312d372e37326101208201527f382031372e33383620342e36353920322e3037312d372e3732372033322e38346101408201527f3120382e382d322e303720372e3732372031372e33383720342e3635392d322e6101608201527f30373120372e3732372032342e31343820362e34373120342e3635392d31372e6101808201527f3338372d372e3732372d322e30373120382e3739392d33322e3834312d372e376101a08201527f32372d322e30373120362e3938382d32362e303820372e37323720322e3037316101c08201527f20342e3931382d31382e33353320372e37323720322e30373120322e3037312d6101e08201527f372e3732372031302e36323520322e38343720322e33332d382e3639342d382e6102008201527f3639342d322e33323920322e3037312d372e3732384c3431352e34332038382e610220820152751cb61917181b98969b971b991c2d11103334b6361e9160511b6102408201526102560190565b8a611c7a565b7f222f3e3c74657874207472616e73666f726d3d22726f74617465283135202d3181527f35372e32313420313237322e31363729222066696c6c3d22236666662220786d60208201527f6c3a73706163653d22707265736572766522207374796c653d2277686974652d60408201527f73706163653a7072652220666f6e742d66616d696c793d22436f75726965722060608201527f4e65772220666f6e742d73697a653d2238302220666f6e742d7765696768743d60808201527f22626f6c642220746578742d616e63686f723d226d6964646c65223e0000000060a082015260bc0190565b7f3c747370616e20783d2232302220793d2236322e353738223e00000000000000815260190190565b86611c7a565b671e17ba39b830b71f60c11b815260080190565b7f3c2f746578743e3c7061746820643d224d3134372e393236203137376838763181527f3668387631366838763868387631376838763136683876313668387631356838602082018190527f763968387631366838763136683876386838763137683876313668387638682d60408301527f387638682d387638682d31367638682d387638682d31367638682d387638682d60608301527f31367638682d387638682d31367638682d3234762d38682d3136762d38682d3860808301527f762d38682d3136762d38682d38762d38682d3136762d38682d38762d38682d3160a08301527f36762d38682d38762d38682d38762d386838762d31366838762d31376838762d60c08301527f386838762d31366838762d31366838762d396838762d31356838762d3136683860e08301527f762d31366838762d31376838762d386838762d31366838762d31366838762d316101008301527f3668387631365a222066696c6c3d2223463241304542222f3e3c7061746820646101208301527f3d224d32372e39323620333935763868387638683876313668387638683876386101408301527f68387631366838763968387631366838763868387631366838763868387631366101608301527f68387638683876313668387631336838762d31336838762d31366838762d38686101808301527f38762d31366838762d386838762d31366838762d386838762d31366838762d396101a08301527f6838762d31366838762d386838762d386838762d31366838762d386838762d386101c08301527f682d387638682d31367638682d387638682d31367638682d387638682d3136766101e08301527f38682d387638682d31367638682d387639682d3234762d39682d38762d38682d6102008301527f3136762d38682d38762d38682d3136762d38682d38762d38682d3136762d38686102208301527f2d38762d38682d3136762d38682d385a222066696c6c3d2223463241304542226102408301527f2f3e3c706174682066696c6c2d72756c653d226576656e6f64642220636c69706102608301527f2d72756c653d226576656e6f64642220643d224d3134372e39323620323636686102808301527f38763136683876313668387638683136762d3868387634396833327638682d386102a08301527f763136682d38762d3136682d32347638682d31367638682d387638682d38762d6102c08301527f3431682d38762d3136683136762d3136682d38762d3136682d38762d3136682d6102e08301527f38763136682d38763136682d38763136683136763136682d38763431682d38766103008301527f2d38682d38762d38682d3136762d38682d3234763136682d38762d3136682d386103208301527f762d38683332762d343968387638683136762d386838762d31366838762d31366103408301527f6838762d38683876385a6d2d3430203831682d38762d333368387638683876386103608301527f6838763235682d3136762d385a6d37322d33336838763333682d387638682d316103808301527f36762d32356838762d386838762d385a222066696c6c3d2223363134303545226103a08301527f2f3e3c7061746820643d224d39392e39323620333935762d38682d38762d38686103c08301527f2d38762d38682d38763136683876386831365a4d3131352e39323620343033686103e08301527f3234762d38682d38762d3136683876386838762d386838763136682d387638686104008301527f32347638682d3536762d385a4d3138372e393236203339357638682d3136762d6104208301527f386831365a4d3138372e39323620333935683136762d386838762d3136682d386104408301527f7638682d387638682d3876385a222066696c6c3d2223363134303545222f3e3c6104608301527f7061746820643d224d3131352e39323620343033762d38682d313676386831366104808301527f5a4d3133392e393236203332326838762d38682d3876385a222066696c6c3d226104a08301527f23363134303545222f3e3c706174682066696c6c2d72756c653d226576656e6f6104c08301527f64642220636c69702d72756c653d226576656e6f64642220643d224d3132372e6104e08301527f39323620343437762d38682d3136762d38682d38762d38682d3136762d38682d6105008301527f38762d38682d3136762d38682d38762d38682d3136762d38682d38762d38682d6105208301527f38762d31366838762d31366838762d31376838762d386838762d31366838762d6105408301527f31366838762d396838762d31356838762d31366838762d31366838762d3137686105608301527f38762d386838762d31366838762d31366838762d3136683136763136683876316105808301526105a08201527f76396838763136683876313668387638683876313768387631366838763136686105c08201527f2d387638682d387638682d31367638682d387638682d31367638682d387638686105e08201527f2d31367638682d3876386838762d38683136762d386838762d38683136762d386106008201527f6838762d38683136762d38683136763136682d387638682d38763136682d38766106208201527f38682d387638682d38763136682d387639682d38763136682d387638682d38766106408201527f3136682d387638682d38763136682d387638682d38763136682d38763133682d6106608201527f3136762d3133682d38762d3136682d38762d38682d38762d3136682d38762d386106808201527f682d38762d3136682d38762d38682d38762d3136682d38762d39682d38762d316106a08201527f36682d38762d38682d38762d38682d38762d3136682d38762d38682d38762d316106c08201527f36683136763868313676386838763868313676386838763868313676386838766106e08201527f386831365a6d32302d32383676313668387631366838763136683876386838766107008201527f31376838763136683876313668387631356838763968387631366838763136686107208201527f3876386838763137683876313668387638682d387638682d387638682d3136766107408201527f38682d387638682d31367638682d387638682d31367638682d387638682d31366107608201527f7638682d3234762d38682d3136762d38682d38762d38682d3136762d38682d386107808201527f762d38682d3136762d38682d38762d38682d3136762d38682d38762d38682d386107a08201527f762d386838762d31366838762d31376838762d386838762d31366838762d31366107c08201527f6838762d396838762d31356838762d31366838762d31366838762d31376838766107e08201527f2d386838762d31366838762d31366838762d313668385a6d313220323836762d6108008201527f386831367638682d31365a6d2d333220306833327638682d387639682d3136766108208201527f2d39682d38762d385a6d313220313232762d3133682d38762d3136682d38762d6108408201527f38682d38762d3136682d38762d38682d38762d3136682d38762d38682d38762d6108608201527f3136682d38762d39682d38762d3136682d38762d38682d38762d38682d38762d6108808201527f3136682d38762d386831367638683876386831367638683876386831367638686108a08201527f387638683136763868387639683234762d396838762d38683136762d386838766108c08201527f2d38683136762d386838762d38683136762d386838762d386831367638682d386108e08201527f763136682d387638682d387638682d38763136682d387639682d38763136682d6109008201527f387638682d38763136682d387638682d38763136682d387638682d38763136686109208201527f2d38763133682d385a6d3131322d313636762d3868387638682d385a6d2d32316109408201527f362030682d38762d38683876385a222066696c6c3d2223363134303545222f3e6109608201527f3c7061746820643d224d31332e373031203335352e3431362030203334372e366109808201527f34386c362e3635382d31312e37343420312e39353720312e313120312e31312d6109a08201527f312e39353820332e39313520322e32322d312e313120312e39353720312e39356109c08201527f3720312e313120312e31312d312e39353820332e39313520322e32322d312e316109e08201527f3120312e39353720312e39353720312e31312d362e3635382031312e3734345a610a008201527f6d2d352e36312d382e33353420332e33332d352e3837322d332e3931352d322e610a208201527f3231392d332e333320352e38373220332e39313520322e3231395a6d352e3837610a408201527f3220332e33323920332e33332d352e3837322d332e3931352d322e3231392d33610a608201527f2e333320352e38373220332e39313520322e3231395a4d32332e383132203333610a808201527f372e3538326c2d312e3935382d312e31312d312e313120312e3935382d372e38610aa08201527f32392d342e34333920322e32322d332e39313520372e38323920342e34333920610ac08201527f332e3332392d352e3837322d372e38332d342e34333920322e32322d332e3931610ae08201527f3420392e37383720352e3534382d362e3635382031312e3734345a4d32322e30610b008201527f3535203331332e3330386c2d312e3935382d312e313120322e32322d332e3931610b208201527f3420312e39353720312e3130392d322e323220332e3931355a6d392e35323420610b408201527f31302e3537332d312e3935372d312e313120322e32322d332e3931352d352e38610b608201527f37332d332e3332392d312e313120312e3935382d312e3935372d312e31312033610b808201527f2e33332d352e38373220372e38323820342e34333920322e32322d332e393135610ba08201527f20312e39353720312e31312d362e3635382031312e3734345a4d34302e343536610bc08201527f203330382e3232326c2d312e3935372d312e31312d312e313120312e3935382d610be08201527f352e3837322d332e33323920312e31312d312e3935382d312e3935372d312e31610c008201527f303920342e3433382d372e38332d332e3931342d322e32313920322e32322d33610c208201527f2e3931352031332e3720372e3736382d362e3635372031312e3734345a6d2d2e610c408201527f3834372d332e30363720332e3332392d352e3837322d352e3837322d332e3332610c608201527f392d332e333320352e38373220352e38373320332e3332395a4d34382e353332610c808201527f203239332e3937376c2d312e3935372d312e31303920322e32322d332e393135610ca08201527f2d392e3738382d352e3534382d312e313120312e3935372d312e3935362d312e610cc08201527f313120332e3332382d352e3837322031312e37343520362e36353820322e3231610ce08201527f392d332e39313420312e39353720312e3130392d362e3635382031312e373434610d008201527f5a4d35382e343538203237362e34376c2d312e3935382d312e31312d312e3131610d208201527f20312e3935372d312e3935372d312e3130392d312e313120312e3935372d352e610d408201527f3837312d332e33323920312e31312d312e3935372d312e3935382d312e313120610d608201527f312e31312d312e3935372d312e3935382d312e313120352e3534392d392e3738610d808201527f3620312e39353720312e3130392d342e34333920372e383320312e3935382031610da08201527f2e3130392d312e313120312e39353820352e38373220332e33323820312e3131610dc08201527f2d312e39353720312e39353720312e313120322e32322d332e3931352d332e39610de08201527f31352d322e3231392d312e313120312e3935372d312e3935372d312e31303920610e008201527f332e3332392d352e38373220372e38323920342e3433382d352e35343820392e610e208201527f3738375a4d36362e343732203236322e3333346c2d312e3935372d312e31312d610e408201527f312e313120312e3935372d372e38332d342e34333820322e32322d332e393135610e608201527f20372e383320342e34333920332e3332382d352e3837322d372e38332d342e34610e808201527f333920322e32322d332e39313520392e37383720352e3534392d362e36353820610ea08201527f31312e3734345a4d36342e383338203233372e3834326c2d312e3935372d312e610ec08201527f313120322e32322d332e39313420312e39353720312e3130392d322e32322033610ee08201527f2e3931355a6d392e3532352031302e3537332d312e3935372d312e313120322e610f008201527f3231392d332e3931352d352e3837322d332e3332392d312e313120312e393538610f208201527f2d312e3935372d312e313120332e3332392d352e38373220372e383320342e34610f408201527f333920322e3231392d332e39313520312e39353720312e31312d362e36353820610f608201527f31312e3734345a4d38332e3234203233322e3735366c2d312e3935372d312e31610f808201527f312d312e313120312e3935382d352e3837322d332e33323920312e31312d312e610fa08201527f3935382d312e3935372d312e31303920342e3433382d372e38332d332e393135610fc08201527f2d322e32313920322e32322d332e3931352031332e37303120372e3736382d36610fe08201527f2e3635382031312e3734345a6d2d2e3834382d332e30363720332e33332d352e6110008201527f3837322d352e3837332d332e3332392d332e33323920352e38373220352e38376110208201527f3220332e3332395a4d39312e313331203231382e3833376c2d312e3935372d316110408201527f2e31303920322e3231392d332e3931352d392e3738372d352e3534382d312e316110608201527f3120312e3935372d312e3935372d312e313120332e33332d352e3837322031316110808201527f2e37343320362e36353820322e32322d332e39313420312e39353720312e31306110a08201527f392d362e3635382031312e3734345a4d3130342e363934203139342e3931346c6110c08201527f2d312e3935382d312e3130392d312e31303920312e3935372d312e3935382d316110e08201527f2e31312d312e313120312e3935382d352e3837312d332e33323920312e31312d6111008201527f312e3935382d312e3935382d312e31303920312e31312d312e3935382d312e396111208201527f35382d312e31303920342e3433392d372e383320312e39353720312e313120316111408201527f2e31312d312e39353720312e39353720312e3130392d322e323220332e3931356111608201527f2d312e3935362d312e31312d322e323220332e39313520312e39353820312e316111808201527f312d312e313120312e39353720352e38373220332e33323920312e31312d312e6111a08201527f39353720312e39353720312e31303920322e3231392d332e3931342d312e39356111c08201527f372d312e313120322e3231392d332e39313520312e39353820312e31312d312e6111e08201527f313120312e39353720312e39353720312e31312d342e34333820372e3832395a6112008201527f4d3131332e353731203137392e3235366c2d31312e3734342d362e3635382d326112208201527f2e323220332e3931342d312e3935372d312e31303920362e3635382d31312e376112408201527f343420312e39353820312e3130392d322e323220332e3931352031312e3734346112608201527f20362e3635382d322e32313920332e3931355a4d3131392e313139203136392e6112808201527f3436396c2d31332e3730312d372e3736384c3131332e313835203134386c312e6112a08201527f39353820312e31312d352e35343920392e37383620332e39313520322e3232206112c08201527f342e3433392d372e383320312e39353720312e31312d342e34333920372e38326112e08201527f3920352e38373220332e3332392d322e32313920332e3931355a222066696c6c611300820152711e91119b189a181aa291179f1e17b9bb339f60711b6113208201526113320190565b95945050505050565b808201808211156104ad576104ad611c4b565b6000826141ae57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176104ad576104ad611c4b56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220b0d15a1ccc02a35bdeba90887b095b71dd4e4a21875941a0e5e9c4dcd9eff1b464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 317,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 319,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 327,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 331,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 337,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4381,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "allowedMinters",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4383,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4387,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "tokenIdToChallengeId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4393,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "hasMinted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 4396,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "enabled",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 4398,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "enabledAt",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4418,
        "contract": "contracts/NFTFlags.sol:NFTFlags",
        "label": "flagColors",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_string_storage)15_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)15_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[15]",
        "numberOfBytes": "480"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}